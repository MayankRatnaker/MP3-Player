import os
import pygame
import tkinter as tk
from tkinter import filedialog

class MP3Player:
    def __init__(self, root):
        self.root = root
        self.root.title("MP3 Player")
        self.music_directory = "path/to/your/music/folder"
        self.music_playlist = self.get_music_files()
        self.current_index = -1
        self.is_playing = False

        self.create_widgets()
        self.update_song_info()

    def get_music_files(self):
        music_files = []
        for filename in os.listdir(self.music_directory):
            if filename.endswith(".mp3"):
                music_files.append(os.path.join(self.music_directory, filename))
        return music_files

    def create_widgets(self):
        # Song Listbox
        self.listbox = tk.Listbox(self.root, selectmode=tk.SINGLE, width=50)
        self.listbox.pack(padx=10, pady=10)
        self.listbox.bind("<Double-Button-1>", self.play_selected_song)
        self.update_playlist()

        # Control Buttons
        self.play_button = tk.Button(self.root, text="Play", command=self.play_pause_music)
        self.play_button.pack(side=tk.LEFT, padx=10)
        self.next_button = tk.Button(self.root, text="Next", command=self.play_next_song)
        self.next_button.pack(side=tk.LEFT, padx=10)
        self.prev_button = tk.Button(self.root, text="Previous", command=self.play_previous_song)
        self.prev_button.pack(side=tk.LEFT, padx=10)
        self.shuffle_button = tk.Button(self.root, text="Shuffle", command=self.shuffle_playlist)
        self.shuffle_button.pack(side=tk.LEFT, padx=10)
        self.stop_button = tk.Button(self.root, text="Stop", command=self.stop_music)
        self.stop_button.pack(side=tk.LEFT, padx=10)

        # Volume Control
        self.volume_scale = tk.Scale(self.root, from_=0, to=1, resolution=0.1, orient=tk.HORIZONTAL, label="Volume", command=self.set_volume)
        self.volume_scale.set(0.5)
        self.volume_scale.pack(pady=10)

        # Song Duration Label
        self.duration_label = tk.Label(self.root, text="Duration: --:--")
        self.duration_label.pack(pady=5)

        # Lyrics Button
        self.lyrics_button = tk.Button(self.root, text="View Lyrics", command=self.show_lyrics)
        self.lyrics_button.pack(pady=5)

    def update_playlist(self):
        self.listbox.delete(0, tk.END)
        for index, song in enumerate(self.music_playlist, start=1):
            self.listbox.insert(tk.END, f"{index}. {os.path.basename(song)}")

    def update_song_info(self):
        if 0 <= self.current_index < len(self.music_playlist):
            song_name = os.path.basename(self.music_playlist[self.current_index])
            self.root.title(f"MP3 Player - {song_name}")
        else:
            self.root.title("MP3 Player")

    def play_selected_song(self, event):
        selected_index = self.listbox.curselection()
        if selected_index:
            self.current_index = selected_index[0]
            self.play_music()

    def play_music(self):
        if 0 <= self.current_index < len(self.music_playlist):
            song_path = self.music_playlist[self.current_index]
            pygame.mixer.init()
            pygame.mixer.music.load(song_path)
            pygame.mixer.music.play()
            self.is_playing = True
            self.update_song_info()
            self.update_duration_label()

    def play_pause_music(self):
        if self.is_playing:
            pygame.mixer.music.pause()
            self.is_playing = False
            self.play_button.config(text="Play")
        else:
            pygame.mixer.music.unpause()
            self.is_playing = True
            self.play_button.config(text="Pause")
        self.update_duration_label()

    def play_next_song(self):
        self.current_index = (self.current_index + 1) % len(self.music_playlist)
        self.play_music()

    def play_previous_song(self):
        self.current_index = (self.current_index - 1) % len(self.music_playlist)
        self.play_music()

    def shuffle_playlist(self):
        import random
        random.shuffle(self.music_playlist)
        self.current_index = 0
        self.play_music()

    def stop_music(self):
        pygame.mixer.music.stop()
        self.is_playing = False
        self.play_button.config(text="Play")
        self.update_duration_label()

    def set_volume(self, volume):
        pygame.mixer.music.set_volume(float(volume))

    def update_duration_label(self):
        if self.is_playing:
            duration = pygame.mixer.music.get_pos() / 1000  # in seconds
            minutes, seconds = divmod(duration, 60)
            self.duration_label.config(text=f"Duration: {int(minutes):02d}:{int(seconds):02d}")
        else:
            self.duration_label.config(text="Duration: --:--")

    def show_lyrics(self):
        # Add code to fetch and display lyrics for the currently playing song
        pass

if __name__ == "__main__":
    root = tk.Tk()
    mp3_player = MP3Player(root)
    root.mainloop()
